from django import template
from django.template.defaultfilters import join, date
from django.shortcuts import render_to_response
from publications.models import BibliographicRecord, PUBLICATIONS_TYPE_ORDER
from datetime import datetime
from contacts_and_people.templatetags.entity_tags import work_out_entity

import operator
import itertools


class publicationobject(object):
    pass


register = template.Library()

#LEGACY Code - to be sorted out and removed!         
PUBLICATION_INFORMATION = (
    {
        "type": "journal-article",
        "kind": "articles",
        "name": "Articles", 
        },{
        "type": "book",
        "kind": "books",
        "name": "Books", 
        },{
        "type": "chapter",
        "kind": "chapters",
        "name": "Chapters", 
        },{
        "type": "conference-proceeding",
        "kind": "conference-proceedings",
        "name": "Conference proceedings", 
        },{
        "type": "monograph",
        "kind": "monographs",
        "name": "Monographs", 
        },{
        "type": "report",
        "kind": "reports",
        "name": "Reports", 
    },       
  )         
         
         
    
@register.inclusion_tag('person_selected_publications.html', takes_context = True)
def get_selected_person_publications(context, researcher = None):
    """   
    Lists Researcher's selected articles
    """
    #work out researcher
    if researcher == None:
        researcher = context.get('person').researcher
    #all selected publications for researcher
    all_publications = BibliographicRecord.objects.filter(
        authored__visible = True, 
        authored__researcher = researcher, 
        authored__is_a_favourite = True)
    #re-order: split all_publications into chunks based upon type and stitch together in a different order
    ordered_publications = None
    for type in PUBLICATIONS_TYPE_ORDER:        
        publications_of_type = all_publications.filter(publication__type = type).order_by('-publication_date',)
        if ordered_publications:
            ordered_publications = itertools.chain(ordered_publications, publications_of_type)
        else:
            ordered_publications = publications_of_type
    return {
        "selected_publications": ordered_publications[0:6]
        }




@register.inclusion_tag('all_publications.html', takes_context = True)
def get_all_person_publications(context, researcher = None):
    """   
    Lists all the Researcher's articles
    """
    #work out researcher
    if researcher == None:
        researcher = context.get('person').researcher
    #all publications for researcher
    all_publications = researcher.get_all_publications() \
        .distinct() \
        .order_by('-publication__type', '-publication_date')
    #re-order: split all_publications into chunks based upon type and stitch together in a different order
    ordered_publications = []
    for type in PUBLICATIONS_TYPE_ORDER:        
        publications_of_type = all_publications.filter(publication__type = type).order_by('-publication_date',)
        ordered_publications.append(publications_of_type)
    return {
        "all_publications": itertools.chain.from_iterable(ordered_publications),
        }  
    
    
    

from datetime import datetime                
@register.inclusion_tag('all_publications.html', takes_context = True)
def get_all_entity_publications(context, entity = None):
    """   
    Lists all the Entity's articles
    """
    #work out entity
    if entity == None:
        entity = work_out_entity(context, entity)
    if entity.abstract_entity:
        real_entity = entity._get_real_ancestor
    else: 
        real_entity = entity
    #all publications for entity
    all_publications = BibliographicRecord.objects.filter(
        authored__visible = True,
        authored__researcher__person__member_of__entity__in=real_entity.get_descendants(include_self=True)) \
        .distinct() \
        .order_by('publication__type', '-publication_date')        
    #re-order: split all_publications into chunks based upon type and stitch together in a different order
    ordered_publications = []
    index_publications = []
    for type in PUBLICATIONS_TYPE_ORDER:        
        publications_of_type = all_publications.filter(publication__type = type).order_by('-publication_date',)
        ordered_publications.append(publications_of_type)
    return {
        "all_publications": itertools.chain.from_iterable(ordered_publications),
        }        



@register.inclusion_tag('entity_selected_publications.html', takes_context = True)
def get_selected_entity_publications(context, heading=None, format = "short", max_items = 20, entity = None):
    """   
    Lists Entity's selected articles
    """
    #work out entity
    if entity == None:
        entity = work_out_entity(context, entity)
    if entity.abstract_entity:
        real_entity = entity._get_real_ancestor
    else: 
        real_entity = entity
    #all selected publications for entity        
    selected_publications = BibliographicRecord.objects.filter(authored__visible = True,
        authored__researcher__person__member_of__entity__in=real_entity.get_descendants(include_self=True)) \
        .distinct() \
        .order_by('publication__type', '-publication_date')        
    #re-order: split all_publications into chunks based upon type and stitch together in a different order
    ordered_publications = []
    for type in PUBLICATIONS_TYPE_ORDER:        
        publications_of_type = all_publications.filter(publication__type = type).order_by('-publication_date',)
        ordered_publications.append(publications_of_type)
    return {
        "all_publications": itertools.chain.from_iterable(ordered_publications)[0:max_items],
        "heading": heading,
        "format": format,
        "entity": entity,
        }
